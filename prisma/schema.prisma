generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  role          Role      @default(BASIC)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  projectsOwned Project[]
  sessions      Session[]
  createdTasks  Task[]
  memberOf      Project[] @relation("TeamMembers")
  assignedTasks Task[]    @relation("assignedTo")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  emojiIcon   String
  owner       User     @relation(fields: [ownerId], references: [id])
  tasks       Task[]
  teamMembers User[]   @relation("TeamMembers")
}

model Task {
  id             String     @id @default(cuid())
  name           String
  description    String
  type           String
  status         TaskStatus
  progress       Int
  isCompleted    Boolean
  startDate      DateTime
  endDate        DateTime
  completionDate DateTime
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  projectId      String
  createdById    String
  createdBy      User       @relation(fields: [createdById], references: [id])
  project        Project    @relation(fields: [projectId], references: [id])
  assignedTo     User[]     @relation("assignedTo")
  Task_A         Task[]     @relation("dependsOn")
  Task_B         Task[]     @relation("dependsOn")

  @@unique([projectId, name])
}

enum Role {
  BASIC
  TEAM_ADMIN
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  ON_HOLD
  DONE
  CANCELLED
}
